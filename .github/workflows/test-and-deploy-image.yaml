---
name: Test and deploy image

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker for Unit Tests
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to registry
          tags: ${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64

      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ github.run_id }}
          format: table
          exit-code: 0

      # This step generates the SARIF report with both HIGH and CRITICAL vulnerabilities
      # but does not block the workflow.
      - name: Run Trivy for HIGH and CRITICAL CVEs and generate report
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-results.sarif
          scanners: vuln

      # This new step directly checks the SARIF file for critical issues.
      - name: Check for CRITICAL vulnerabilities in SARIF report
        run: |
          if grep -q '"level": "critical"' trivy-results.sarif; then
            echo "CRITICAL vulnerabilities found in trivy-results.sarif. Failing the build."
            exit 1
          else
            echo "No CRITICAL vulnerabilities found. Build can continue."
          fi

      - name: Upload Trivy scan results to Github Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Build and export to Docker for Integration Tests
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to registry
          tags: ${{ github.run_id }}:integration-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64

      - name: Run Integration Tests
        run: |
          export TESTING_IMAGE=${{ github.run_id }}:integration-test
          export LDAP_ADMIN_PASSWORD=${{ secrets.LDAP_ADMIN_PASSWORD }}
          docker compose -f compose.yaml up --abort-on-container-exit --exit-code-from integration-tester

      - name: Docker metadata for final image build
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: sundalei/user-manage-ldap
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Docker build and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Docker image tag(s) pushed"

      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace
